/* --------------------------------------------------------------  */
/* (C)Copyright 2001,2006,                                         */
/* International Business Machines Corporation,                    */
/* Sony Computer Entertainment, Incorporated,                      */
/* Toshiba Corporation,                                            */
/*                                                                 */
/* All Rights Reserved.                                            */
/* --------------------------------------------------------------  */
/* PROLOG END TAG zYx                                              */
#include "../simpleDMA.h"
#include <spu_mfcio.h>
#include <stdio.h>

/* Here's the local copy of the control block, to be filled by the DMA */
control_block cb __attribute__ ((aligned (128)));

/* Here's the local copy of the data array, to be filled by the DMA */
int data[DATA_BUFFER_ENTRIES/8] __attribute__ ((aligned (128)));


int main(unsigned long long speid, addr64 argp, addr64 envp) 
{
  int i;

  /* Here is the actual DMA call */
  /* the first parameter is the address in local store to place the data */
  /* the second parameter holds the main memory address                  */
  /* the third parameter holds the number of bytes to DMA                */
  /* the fourth parameter identifies a "tag" to associate with this DMA  */
  /* (this should be a number between 0 and 31, inclusive)               */
  /* the last two parameters are only useful if you've implemented your  */
  /* own cache replacement management policy.  Otherwise set them to 0.  */

  mfc_get(&cb, argp.ull, sizeof(cb), 31, 0, 0);

  /* Now, we set the "tag bit" into the correct channel on the hardware  */
  /* this is always 1 left-shifted by the tag specified with the DMA     */
  /* for whose completion you wish to wait.                              */
  mfc_write_tag_mask(1<<31);

  /* Now, issue the read and wait to guarantee DMA completion before we continue. */
  mfc_read_tag_status_all();

  /* DMA the data from system memory to our local store buffer. */
  mfc_get(data, cb.addr.ull, DATA_BUFFER_SIZE/8, 31, 0, 0);


  printf("Address received through control block = 0x%llx\n", cb.addr.ull);


  /* Wait for the data array DMA to complete. */
  mfc_read_tag_status_all();

  /* Verify that the data array contains a valid fibonacci sequence.
   */
 /* for (i=0; i<DATA_BUFFER_ENTRIES/8; i++) {
    if (data[i] != i*i) {
      printf("ERROR: Square error at entry %d. Expected %d, Got %d\n",
	     i, i*i , data[i]);
      return (1);
    }
  }
*/
for(i=0;i<8;i++)
	if( data[i] == 16 )
		printf("Found In (0x%llx)\n", id);
	
  return 0;
}
